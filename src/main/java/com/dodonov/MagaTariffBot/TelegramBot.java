package com.dodonov.MagaTariffBot;

import org.springframework.beans.factory.annotation.Autowired;
import org.telegram.telegrambots.bots.DefaultBotOptions;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.methods.GetMe;
import org.telegram.telegrambots.meta.api.methods.ParseMode;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

public class TelegramBot extends TelegramLongPollingBot {
    @Autowired
    HistoryJsonChatParser historyParser;
    private Long botId;
    private final String botUsername;
    private boolean awaitingJsonFile = false;
    private final Map<Long, UserStats> statsMap = new ConcurrentHashMap<>();

    public TelegramBot(DefaultBotOptions options,
                       String botToken,
                       String botUsername
    ) {
        super(options, botToken);
        this.botUsername = botUsername;
        initBotId();
    }

    private void initBotId() {
        try {
            User botUser = execute(new GetMe());
            this.botId = botUser.getId();
        } catch (TelegramApiException e) {
            throw new RuntimeException("Failed to get bot ID", e);
        }
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (!update.hasMessage()) {
            return;
        }

        Message message = update.getMessage();
        User user = message.getFrom();
        Chat chat = message.getChat();
        String text = message.getText();
        Voice voice = message.getVoice();
        Document document = message.getDocument();

        String username = (message.getFrom().getUserName() != null)
                ? "@" + message.getFrom().getUserName()
                : message.getFrom().getFirstName();

        if (!chat.isGroupChat() && !chat.isSuperGroupChat()) {
            return;
        }

        if (user.getIsBot()) {
            return;
        }

        if (awaitingJsonFile && document != null) {
            awaitingJsonFile = false;
            String fileName = message.getDocument().getFileName();
            if (fileName.endsWith(".json")) {
                try {
                    File file = downloadFile(execute(new GetFile(document.getFileId())));
                    Map<Long, UserStats> parsedStats = historyParser.parseJsonFile(file);
                    mergeStats(parsedStats);
                    sendText(message.getChatId(), "MAGA-–¥–∞–Ω–Ω—ã–µ –∏–∑ MAGA-—Ñ–∞–π–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!");
                } catch (Exception e) {
                    sendText(message.getChatId(), "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ MAGA —Ñ–∞–π–ª–∞: " + e.getMessage());
                }
            } else {
                sendText(message.getChatId(), "–ß—Ç–æ —á—ë—Ä—Ç –≤–æ–∑—å–º–∏ —Ç—ã –º–Ω–µ —Å–∫–∏–Ω—É–ª? –ú–Ω–µ –Ω—É–∂–µ–Ω —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ MAGA.json. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞, —É —Ç–µ–±—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è!");
            }
        }

        if (text != null){
            if (text.equalsIgnoreCase("!maga-—Å—á—ë—Ç—á–∏–∫")) {
                sendStats(message.getChatId());
            } else if (text.equalsIgnoreCase("!maga-—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å")) {
                sendTariffStatistic(chat.getId(), user.getId());
            } else if (text.equalsIgnoreCase("!maga-–∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è")) {
                awaitingJsonFile = true;
                sendText(chat.getId(), "–ù—É–∂–µ–Ω MAGA.json –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è");
            } else if (text.equalsIgnoreCase("!maga-–∏–Ω—Ç—Ä–æ")) {
                introduce(chat.getId());
            } else {
                validateTextMessages(user, username, text);
            }
        } else if (voice != null) {
            validateVoiceMessages(user, username, voice);
        }
    }

    private void introduce(Long chatId) {
        String introText = "üë∫ –í–ù–ò–ú–ê–ù–ò–ï, –î–†–£–ó–¨–Ø! –≠—Ç–æ—Ç —á–∞—Ç –ü–û–ì–†–£–ó–ò–õ–°–Ø –≤ –ü–£–ß–ò–ù–£ –ù–ï–°–ü–†–ê–í–ï–î–õ–ò–í–û–°–¢–ò!!!\n\n"
                + "–ù–∞—à–∞ –í–ï–õ–ò–ö–ê–Ø –ß–ê–¢–û–≠–ö–û–ù–û–ú–ò–ö–ê –°–¢–†–ê–î–ê–ï–¢ –∏–∑-–∑–∞ –ù–ï–ß–ï–°–¢–ù–´–• –ò–ì–†–û–ö–û–í!!!\n\n"
                + "–ö–ò–¢–ê–ô–°–ö–ò–ï –ë–û–¢–´, –ï–í–†–û–ü–ï–ô–°–ö–ò–ï –¢–†–û–õ–õ–ò –∏ –§–ï–ô–ö–û–í–´–ï –°–ú–ò –ó–ê–•–í–ê–¢–ò–õ–ò –Ω–∞—à —á–∞—Ç!!!\n\n"
                + "üö® –°–ï–ì–û–î–ù–Ø –ú–´ –ò–°–ü–†–ê–í–ò–ú –í–ï–°–¨ –≠–¢–û–¢ –£–ñ–ê–°!!!\n\n"
                + "üí™ –ö–ê–ñ–î–´–ô, –∫—Ç–æ –û–ë–ö–†–ê–î–´–í–ê–ï–¢ –Ω–∞—à –í–ï–õ–ò–ö–ò–ô –ß–ê–¢, –∫—Ç–æ –ù–ï –°–û–ë–õ–Æ–î–ê–ï–¢ –≠–ö–°–ü–û–†–¢–ù–û-–ò–ú–ü–û–†–¢–ù–´–ô –ë–ê–õ–ê–ù–°, –ë–£–î–ï–¢ –ù–ê–ö–ê–ó–ê–ù –∏ –ó–ê–ü–õ–ê–¢–ò–¢ –ë–û–õ–¨–®–ò–ï, –ú–û–©–ù–´–ï –ü–û–®–õ–ò–ù–´!!!!!\n\n"
                + "MAGA!!!!!!! –°–î–ï–õ–ê–ï–ú –ß–ê–¢ –°–ù–û–í–ê –í–ï–õ–ò–ö–ò–ú!!!!!!! üí•";
        sendText(chatId, introText);
    }

    private String makeBold(String text) {
        return "<b>" + text.replaceAll("<", "&lt;")
                .replaceAll(">", "&gt;") + "</b>";
    }

    private void mergeStats(Map<Long, UserStats> parsedStats) {
        parsedStats.forEach((name, newStats) -> {
            Long key = (long) name.hashCode();
            statsMap.compute(key, (k, existingStat) -> {
                if (existingStat == null) {
                    return newStats;
                } else {
                    for (int i = 0; i < newStats.getMessageCount(); i++) {
                        existingStat.incrementMessageCount();
                    }
                    existingStat.addCharacters(newStats.getCharacterCount());
                    return existingStat;
                }
            });
        });
    }

    private void sendTariffStatistic(Long chatId, Long initiatorId) {
        UserStats initiatorStats = statsMap.get(initiatorId);
        if (initiatorStats == null) {
            sendText(chatId, "MAGA-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –°—É–¥–∞—Ä—å, –Ω–∞—á–Ω–∏—Ç–µ –æ–±—â–∞—Ç—å—Å—è!");
            return;
        }

        int initiatorExports = initiatorStats.getCharacterCount();
        List<UserStats> otherUsers = statsMap.values().stream()
                .filter(stats ->
                        !stats.getUserId().equals(initiatorId) &&
                                !stats.getUserId().equals(botId)
                )
                .collect(Collectors.toList());

        List<UserStats> tariffTargets = new ArrayList<>();
        List<UserStats> nonTariffTargets = new ArrayList<>();

        for (UserStats user : otherUsers) {
            int userExport = user.getCharacterCount();
            int tradeDeficit = userExport - initiatorExports;

            if (tradeDeficit < 0) {
                tariffTargets.add(user);
            } else {
                nonTariffTargets.add(user);
            }
        }

        tariffTargets.sort((u1, u2) -> {
            double tariff1 = calculateTariff(u1, initiatorExports);
            double tariff2 = calculateTariff(u2, initiatorExports);
            return Double.compare(tariff2, tariff1);
        });

        StringBuilder response = new StringBuilder();
        response.append("üî• TRUMP-STYLE –°–ü–†–ê–í–ï–î–õ–ò–í–û–°–¢–¨ –î–õ–Ø ")
                .append(initiatorStats.getFirstName())
                .append(" üî•\n\n");

        response.append("üö® –í–†–ê–ì–ò –ß–ê–¢–ê (–ó–ê–í–ê–õ–ò–¢–¨ –ü–û–®–õ–ò–ù–ê–ú–ò):\n");
        if (tariffTargets.isEmpty()) {
            response.append("–í—Å–µ –ø–∞—Ç—Ä–∏–æ—Ç—ã! –í—Ä–∞–≥–æ–≤ –Ω–µ—Ç!\n");
        } else {
            tariffTargets.forEach(user -> {
                int userExport = user.getCharacterCount();
                int deficit = initiatorExports - userExport;
                double tariff = calculateTariff(user, initiatorExports);

                String username = user.getUsername() != null ?
                        "@" + user.getUsername() : "–ê–Ω–æ–Ω–∏–º";

                response.append(String.format(
                        "‚ñ´Ô∏è %s (%s) ‚Äî –æ—Ç—Å—Ç–∞—ë—Ç –Ω–∞ %d ‚Üí ü¶Ö +%.1f%%\n",
                        user.getFirstName(),
                        username,
                        deficit,
                        tariff
                ));
            });
        }

        response.append("\nüïäÔ∏è –ù–ê–®–ò –°–õ–û–ù–Ø–†–´ (–ë–ï–ó –ü–û–®–õ–ò–ù):\n");
        if (nonTariffTargets.isEmpty()) {
            response.append("–°–ª–∞–±—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã! –í—Å–µ –≤—Ä–∞–≥–∏!\n");
        } else {
            nonTariffTargets.forEach(user -> {
                String username = user.getUsername() != null ?
                        "@" + user.getUsername() : "–ê–Ω–æ–Ω–∏–º";

                response.append(String.format(
                        "‚ñ´Ô∏è %s (%s) ‚Äî –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ %d üá∫üá∏\n",
                        user.getFirstName(),
                        username,
                        user.getCharacterCount() - initiatorExports
                ));
            });
        }

        sendText(chatId, response.toString());
    }

    private double calculateTariff(UserStats user, int initiatorExports) {
        int userExport = user.getCharacterCount();
        int deficit = initiatorExports - userExport;
        if (userExport == 0) {
            return 1000.0;
        }
        return ((double) Math.abs(deficit) / userExport) * 100;
    }

    private void sendText(Long chatId, String text) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId.toString());
        sendMessage.setText(makeBold(text));
        sendMessage.setParseMode(ParseMode.HTML);
        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendStats(Long chatId) {
        StringBuilder statsMessage = new StringBuilder("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ MAGA-—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n");
        statsMap.forEach((key, userStats) -> {
            statsMessage.append(String.format("%s (%s): —Å–æ–æ–±—â–µ–Ω–∏–π: %d, —Å—É–º–º–∞—Ä–Ω—ã–π MAGA-—ç–∫—Å–ø–æ—Ä—Ç: %d\n",
                    userStats.getFirstName(), userStats.getUsername(), userStats.getMessageCount(), userStats.getCharacterCount()));
        });
        sendText(chatId, statsMessage.toString());
    }

    private void validateTextMessages(User user, String username, String text) {
        int charsToAdd = text.replaceAll("\\s", "").length();
        updateUserStats(user, username, charsToAdd);
    }

    private void validateVoiceMessages(User user, String username, Voice voice) {
        int duration = voice.getDuration();
        int charsToAdd = (int) (duration * 7.5);
        updateUserStats(user, username, charsToAdd);
    }

    private void updateUserStats(User user, String username, int charsToAdd) {
        statsMap.compute(user.getId(), (id, userStats) -> {
            if (userStats == null) {
                userStats = new UserStats(user.getId(), username, user.getFirstName(), 0, 0);
            }
            if (username != null && (userStats.getUsername() == null || !userStats.getUsername().equals(username))) {
                userStats.setUsername(username);
            }
            if (user.getFirstName() != null && !user.getFirstName().equals(userStats.getFirstName())) {
                userStats.setFirstName(user.getFirstName());
            }
            userStats.incrementMessageCount();
            userStats.addCharacters(charsToAdd);
            return userStats;
        });
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }
}